================================================================================
PROJECT CODE ANALYSIS REPORT
================================================================================

Project Path: /Users/itamar/projects/wikipedia
Total Files: 53
Generated: /Users/itamar/projects/wikipedia

FILE TYPES SUMMARY:
----------------------------------------
.env            :    2 files
.example        :    1 files
.json           :   11 files
.md             :    1 files
.py             :   36 files
.txt            :    2 files

================================================================================
FILE: README.md
================================================================================
Path: /Users/itamar/projects/wikipedia/README.md
Size: 189 bytes
Extension: .md

Lines:
  3

Size:
  184

Type:
  text


================================================================================
FILE: analyze_codebase.py
================================================================================
Path: /Users/itamar/projects/wikipedia/analyze_codebase.py
Size: 7,688 bytes
Extension: .py

‚ùå Analysis Error: argument of type 'Subscript' is not iterable

================================================================================
FILE: config/api_keys.env
================================================================================
Path: /Users/itamar/projects/wikipedia/config/api_keys.env
Size: 223 bytes
Extension: .env

Lines:
  2

Size:
  223

Type:
  text


================================================================================
FILE: config/api_keys.env.example
================================================================================
Path: /Users/itamar/projects/wikipedia/config/api_keys.env.example
Size: 377 bytes
Extension: .example

Lines:
  10

Size:
  377

Type:
  text


================================================================================
FILE: processed_scripts/conversational/Apple_20250712_2143.json
================================================================================
Path: /Users/itamar/projects/wikipedia/processed_scripts/conversational/Apple_20250712_2143.json
Size: 29,313 bytes
Extension: .json

Lines:
  21

Size:
  29236

Type:
  text


================================================================================
FILE: processed_scripts/conversational/Aryna_Sabalenka_20250711_1926.json
================================================================================
Path: /Users/itamar/projects/wikipedia/processed_scripts/conversational/Aryna_Sabalenka_20250711_1926.json
Size: 10,030 bytes
Extension: .json

Lines:
  58

Size:
  10028

Type:
  text


================================================================================
FILE: processed_scripts/conversational/Aryna_Sabalenka_20250711_1938.json
================================================================================
Path: /Users/itamar/projects/wikipedia/processed_scripts/conversational/Aryna_Sabalenka_20250711_1938.json
Size: 12,801 bytes
Extension: .json

Lines:
  94

Size:
  12799

Type:
  text


================================================================================
FILE: processed_scripts/conversational/Aryna_Sabalenka_20250711_2118.json
================================================================================
Path: /Users/itamar/projects/wikipedia/processed_scripts/conversational/Aryna_Sabalenka_20250711_2118.json
Size: 15,899 bytes
Extension: .json

Lines:
  78

Size:
  15845

Type:
  text


================================================================================
FILE: processed_scripts/conversational/Donald_Trump_20250623_0027.json
================================================================================
Path: /Users/itamar/projects/wikipedia/processed_scripts/conversational/Donald_Trump_20250623_0027.json
Size: 9,841 bytes
Extension: .json

Lines:
  54

Size:
  9835

Type:
  text


================================================================================
FILE: processed_scripts/conversational/Zohran_Mamdani_20250628_1826.json
================================================================================
Path: /Users/itamar/projects/wikipedia/processed_scripts/conversational/Zohran_Mamdani_20250628_1826.json
Size: 8,069 bytes
Extension: .json

Lines:
  46

Size:
  8061

Type:
  text


================================================================================
FILE: processed_scripts/conversational/Zohran_Mamdani_20250628_1836.json
================================================================================
Path: /Users/itamar/projects/wikipedia/processed_scripts/conversational/Zohran_Mamdani_20250628_1836.json
Size: 8,655 bytes
Extension: .json

Lines:
  50

Size:
  8655

Type:
  text


================================================================================
FILE: processed_scripts/conversational/Zohran_Mamdani_20250628_1839.json
================================================================================
Path: /Users/itamar/projects/wikipedia/processed_scripts/conversational/Zohran_Mamdani_20250628_1839.json
Size: 9,599 bytes
Extension: .json

Lines:
  50

Size:
  9599

Type:
  text


================================================================================
FILE: project_analysis.txt
================================================================================
Path: /Users/itamar/projects/wikipedia/project_analysis.txt
Size: 0 bytes
Extension: .txt

Type:
  text


================================================================================
FILE: raw_articles/Apple.json
================================================================================
Path: /Users/itamar/projects/wikipedia/raw_articles/Apple.json
Size: 44,187 bytes
Extension: .json

Lines:
  71

Size:
  44062

Type:
  text


================================================================================
FILE: raw_articles/Bible.json
================================================================================
Path: /Users/itamar/projects/wikipedia/raw_articles/Bible.json
Size: 89,587 bytes
Extension: .json

Lines:
  46

Size:
  89033

Type:
  text


================================================================================
FILE: requirements.txt
================================================================================
Path: /Users/itamar/projects/wikipedia/requirements.txt
Size: 360 bytes
Extension: .txt

Lines:
  20

Size:
  360

Type:
  text


================================================================================
FILE: run_tests.py
================================================================================
Path: /Users/itamar/projects/wikipedia/run_tests.py
Size: 29,967 bytes
Extension: .py

‚ùå Analysis Error: argument of type 'Constant' is not iterable

================================================================================
FILE: src/api_diagnostic.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/api_diagnostic.py
Size: 1,139 bytes
Extension: .py

üì¶ Imports:
  - content_fetcher.WikipediaContentFetcher
  - script_formatter.PodcastScriptFormatter
  - traceback


================================================================================
FILE: src/article_editor.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/article_editor.py
Size: 8,166 bytes
Extension: .py

üì¶ Imports:
  - openai
  - re
  - time
  - typing.List
  - typing.Tuple
  - json
  - os

üî¢ Constants:
  - API_KEY (line 204)

üèóÔ∏è  Classes:
  üìã ChapterEditor (line 8)
     Methods:
       - __init__(self, api_key) (line 9)
         üìù Initialize the chapter editor with OpenAI API key.
       - split_into_chapters(self, article) (line 13)
         üìù Split article into chapters based on headers or natural breaks.
Returns list of (title, content) tuples.
       - _split_by_length(self, text, max_words) (line 50)
         üìù Split text into chunks of approximately max_words.
       - edit_chapter(self, title, content, instructions) (line 63)
         üìù Edit a single chapter using OpenAI API.
       - edit_article_by_chapters(self, article, instructions, delay) (line 95)
         üìù Edit an entire article by processing each chapter separately.

Args:
    article: The full article text
    instructions: Editing instructions to apply to each chapter
    delay: Delay between API calls to avoid rate limits

Returns:
    The fully edited article
       - save_progress(self, chapters, filename) (line 139)
         üìù Save editing progress to a JSON file.
       - load_progress(self, filename) (line 149)
         üìù Load editing progress from a JSON file.

‚öôÔ∏è  Functions:
  - edit_long_article(article_text, editing_instructions, api_key) (line 158)
    üìù Main function to edit a long article chapter by chapter.

Args:
    article_text: The full article to edit
    editing_instructions: Instructions for how to edit each chapter
    api_key: OpenAI API key

Returns:
    The fully edited article
  - edit_article_from_file(input_file, output_file, instructions, api_key) (line 174)
    üìù Edit an article from a file and save the result.

Args:
    input_file: Path to input article file
    output_file: Path to save edited article
    instructions: Editing instructions
    api_key: OpenAI API key


================================================================================
FILE: src/audio_pipeline.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/audio_pipeline.py
Size: 63,313 bytes
Extension: .py

üìù File Docstring:
Simplified Audio Generation Pipeline
Handles audio generation with graceful fallback when TTS not available

üì¶ Imports:
  - json
  - subprocess
  - re
  - os
  - time
  - datetime.datetime
  - pathlib.Path
  - typing.Dict
  - typing.List
  - typing.Optional
  - typing.Tuple
  - google.cloud.texttospeech
  - tts_processor.SSMLProcessor
  - script_formatter.PodcastScript

üî¢ Constants:
  - GOOGLE_TTS_AVAILABLE (line 904)
  - SSML_PROCESSOR_AVAILABLE (line 911)
  - GOOGLE_TTS_AVAILABLE (line 906)
  - SSML_PROCESSOR_AVAILABLE (line 913)

üèóÔ∏è  Classes:
  üìã AudioGenerator (line 917)
     üìù Simplified audio generation with graceful error handling
     Methods:
       - __init__(self, pipeline) (line 920)
         üìù Initialize with reference to main pipeline
       - is_available(self) (line 942)
         üìù Check if audio generation is available
       - generate_complete_podcast(self, script, voice, topic, style) (line 946)
         üìù Generate complete podcast package with audio
       - generate_from_script_file(self, script_filename) (line 988)
         üìù Generate audio from a cached script file
       - _create_script_object(self, script_data) (line 1030)
         üìù Create script object from data
       - _load_script_from_cache(self, script_filename) (line 1051)
         üìù Load a script from the cache directory
       - _generate_audio_gcp(self, script, voice) (line 1086)
         üìù Generate audio using Google Cloud TTS with simplified approach
       - _clean_text_for_tts(self, text) (line 1115)
         üìù Clean text for TTS
       - _generate_single_audio(self, text, voice, script) (line 1125)
         üìù Generate audio for short text in one request
       - _generate_chunked_audio(self, text, voice, script) (line 1169)
         üìù Generate audio in chunks for long text
       - _split_text_into_chunks(self, text, max_chars) (line 1258)
         üìù Split text into chunks at sentence boundaries
       - _synthesize_speech(self, text, voice_config) (line 1276)
         üìù Synthesize speech with retry logic
       - _get_voice_config(self, voice_name) (line 1314)
         üìù Get voice configuration
       - _combine_audio_files(self, audio_files, output_path) (line 1344)
         üìù Combine audio files using ffmpeg or fallback
       - _combine_with_ffmpeg(self, audio_files, output_path) (line 1357)
         üìù Combine using ffmpeg
       - _combine_with_fallback(self, audio_files, output_path) (line 1387)
         üìù Simple binary concatenation fallback
       - _make_safe_filename(self, title) (line 1401)
         üìù Convert title to safe filename
       - _create_podcast_package(self, script, audio_result, style, voice, topic) (line 1408)
         üìù Create podcast package with metadata
       - list_podcasts(self) (line 1436)
         üìù List all created podcasts
       - get_available_voices(self) (line 1462)
         üìù Get available voices


================================================================================
FILE: src/config/api_keys.env
================================================================================
Path: /Users/itamar/projects/wikipedia/src/config/api_keys.env
Size: 619 bytes
Extension: .env

Lines:
  17

Size:
  619

Type:
  text


================================================================================
FILE: src/config_management/__init__.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/config_management/__init__.py
Size: 376 bytes
Extension: .py

üì¶ Imports:
  - config_manager.ConfigManager
  - config_manager.PipelineConfig
  - config_manager.APIConfig
  - config_manager.ContentSourceConfig
  - config_manager.AudioConfig
  - config_manager.ScriptConfig
  - config_manager.CacheConfig
  - config_manager.get_config
  - config_manager.get_api_config


================================================================================
FILE: src/config_management/config_manager.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/config_management/config_manager.py
Size: 13,426 bytes
Extension: .py

‚ùå Analysis Error: argument of type 'Call' is not iterable

================================================================================
FILE: src/content_fetcher.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/content_fetcher.py
Size: 22,289 bytes
Extension: .py

‚ùå Analysis Error: argument of type 'Attribute' is not iterable

================================================================================
FILE: src/content_pipeline.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/content_pipeline.py
Size: 17,854 bytes
Extension: .py

üìù File Docstring:
Content Processing Pipeline

This module handles all content-related operations:
- Fetching and filtering articles
- Script generation with chapter editing
- Content length management

üì¶ Imports:
  - time
  - copy
  - datetime.datetime
  - typing.List
  - typing.Optional
  - script_formatter.PodcastScript

üèóÔ∏è  Classes:
  üìã ContentProcessor (line 17)
     üìù Handles content fetching, processing, and script generation
     Methods:
       - __init__(self, pipeline) (line 20)
         üìù Initialize with reference to main pipeline
       - _should_use_chapter_editing(self, article, target_duration) (line 27)
         üìù Determine if an article should use chapter-by-chapter editing
       - _generate_script_with_chapter_editor(self, article, style, custom_instructions) (line 44)
         üìù Generate script using chapter-by-chapter editing for long articles
       - fetch_and_generate_trending(self, count, style) (line 151)
         üìù Fetch trending articles and generate scripts
       - fetch_and_generate_featured(self, count, style) (line 236)
         üìù Fetch featured articles and generate scripts
       - generate_single_topic(self, topic, style, custom_instructions, target_duration) (line 273)
         üìù Generate script for a specific topic

  üìã ChapterScript (line 123)
     Methods:
       - __init__(self, title, script, style, source_article, word_count, estimated_duration) (line 124)


================================================================================
FILE: src/content_sources/__init__.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/content_sources/__init__.py
Size: 378 bytes
Extension: .py

üì¶ Imports:
  - manager.ContentSourceManager
  - manager.create_content_source_manager
  - compatibility_layer.WikipediaContentFetcher
  - interfaces.Article
  - interfaces.SearchCriteria
  - interfaces.ContentLength


================================================================================
FILE: src/content_sources/compatibility_layer.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/content_sources/compatibility_layer.py
Size: 22,443 bytes
Extension: .py

‚ùå Analysis Error: argument of type 'Attribute' is not iterable

================================================================================
FILE: src/content_sources/content_processors.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/content_sources/content_processors.py
Size: 23,858 bytes
Extension: .py

‚ùå Analysis Error: argument of type 'JoinedStr' is not iterable

================================================================================
FILE: src/content_sources/interfaces.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/content_sources/interfaces.py
Size: 13,116 bytes
Extension: .py

üìù File Docstring:
Content Sources - Interface Definitions
Defines contracts for all content source operations

üì¶ Imports:
  - abc.ABC
  - abc.abstractmethod
  - typing.List
  - typing.Dict
  - typing.Optional
  - typing.Tuple
  - typing.Union
  - dataclasses.dataclass
  - datetime.datetime
  - enum.Enum
  - core.models.ProcessingResult

üî¢ Constants:
  - SHORT (line 17)
  - MEDIUM (line 18)
  - LONG (line 19)
  - FULL (line 20)

üèóÔ∏è  Classes:
  üìã ContentLength (line 15)
     Inherits from: Enum
     üìù Content length options for articles

  üìã ArticleMetadata (line 24)
     üìù Metadata for an article

  üìã ArticleSuggestion (line 37)
     üìù Article suggestion with relevance scoring

  üìã Article (line 48)
     üìù Complete article data structure
     Methods:
       - metadata(self) (line 63)
         üìù Get article metadata
       - _estimate_duration(self, wpm) (line 76)
         üìù Estimate reading duration

  üìã SearchCriteria (line 87)
     üìù Criteria for content search and filtering
     Methods:
       - __post_init__(self) (line 97)

  üìã BatchFetchResult (line 108)
     üìù Result of batch fetching operation
     Methods:
       - __post_init__(self) (line 116)

  üìã ContentSource (line 120)
     Inherits from: ABC
     üìù Base interface for content sources
     Methods:
       - supports_source(self, identifier) (line 165)
         üìù Check if this source can handle the given identifier

Args:
    identifier: Source identifier (URL, title, etc.)
    
Returns:
    True if this source can handle the identifier

  üìã TrendingContentSource (line 178)
     Inherits from: ABC
     üìù Interface for sources that can provide trending content

  üìã FeaturedContentSource (line 195)
     Inherits from: ABC
     üìù Interface for sources that can provide featured/high-quality content

  üìã CategoryContentSource (line 212)
     Inherits from: ABC
     üìù Interface for sources that can provide content by category

  üìã HistoricalContentSource (line 240)
     Inherits from: ABC
     üìù Interface for sources that can provide historical content

  üìã ContentProcessor (line 258)
     Inherits from: ABC
     üìù Interface for content processing operations
     Methods:
       - calculate_quality_score(self, article) (line 276)
         üìù Calculate quality score for an article

Args:
    article: Article to score
    
Returns:
    Quality score between 0.0 and 1.0
       - estimate_duration(self, word_count, style) (line 289)
         üìù Estimate podcast duration based on word count and style

Args:
    word_count: Number of words
    style: Speaking style
    
Returns:
    Tuple of (duration_seconds, formatted_duration)

  üìã ContentValidator (line 303)
     Inherits from: ABC
     üìù Interface for content validation
     Methods:
       - validate_article(self, article, criteria) (line 307)
         üìù Validate article meets quality and content criteria

Args:
    article: Article to validate
    criteria: Validation criteria
    
Returns:
    ProcessingResult with validated article or validation errors
       - is_suitable_for_podcast(self, article, criteria) (line 321)
         üìù Check if article is suitable for podcast generation

Args:
    article: Article to check
    criteria: Suitability criteria
    
Returns:
    True if suitable for podcast

  üìã SuggestionProvider (line 335)
     Inherits from: ABC
     üìù Interface for article suggestion services
     Methods:
       - calculate_similarity(self, query, title) (line 367)
         üìù Calculate similarity score between query and title

Args:
    query: Search query
    title: Article title
    
Returns:
    Similarity score between 0.0 and 1.0

  üìã ContentCache (line 381)
     Inherits from: ABC
     üìù Interface for content caching operations

  üìã InteractiveSelector (line 450)
     Inherits from: ABC
     üìù Interface for interactive article selection
     Methods:
       - display_suggestions(self, query, suggestions) (line 468)
         üìù Display suggestions to user

Args:
    query: Original search query
    suggestions: List of suggestions to display


================================================================================
FILE: src/content_sources/manager.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/content_sources/manager.py
Size: 20,754 bytes
Extension: .py

‚ùå Analysis Error: argument of type 'BinOp' is not iterable

================================================================================
FILE: src/content_sources/wikipedia_source.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/content_sources/wikipedia_source.py
Size: 49,229 bytes
Extension: .py

‚ùå Analysis Error: argument of type 'Await' is not iterable

================================================================================
FILE: src/core/__init__.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/core/__init__.py
Size: 2,249 bytes
Extension: .py

üìù File Docstring:
Core package for the podcast generation system.
Contains interfaces, models, and foundational components.

üì¶ Imports:
  - interfaces.ContentFetcher
  - interfaces.ContentProcessor
  - interfaces.ScriptGenerator
  - interfaces.ScriptProcessor
  - interfaces.AudioGenerator
  - interfaces.AudioProcessor
  - interfaces.CacheManager
  - interfaces.ConfigManager
  - interfaces.Pipeline
  - interfaces.PipelineStep
  - interfaces.ProcessingResult
  - interfaces.ProcessingStatus
  - models.Article
  - models.PodcastScript
  - models.ScriptSegment
  - models.PodcastEpisode
  - models.VoiceConfig
  - models.AudioMetadata
  - models.ContentMetadata
  - models.ProcessingJob
  - models.PipelineConfig
  - models.ContentType
  - models.ScriptStyle
  - models.AudioFormat
  - models.QualityLevel
  - exceptions.PodcastGenerationError
  - exceptions.ConfigurationError
  - exceptions.ContentFetchError
  - exceptions.ScriptGenerationError
  - exceptions.AudioGenerationError
  - exceptions.CacheError
  - exceptions.ValidationError
  - exceptions.APIError
  - exceptions.ContentValidationError
  - exceptions.ScriptProcessingError
  - exceptions.AudioProcessingError
  - exceptions.RateLimitError
  - exceptions.AuthenticationError
  - exceptions.QuotaExceededError
  - exceptions.PipelineError
  - exceptions.TimeoutError
  - exceptions.DependencyError
  - exceptions.StorageError
  - exceptions.QualityError


================================================================================
FILE: src/core/exceptions.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/core/exceptions.py
Size: 7,677 bytes
Extension: .py

üìù File Docstring:
Custom exceptions for the podcast generation system.
Provides specific error types for better error handling and debugging.

üì¶ Imports:
  - typing.Optional
  - typing.Dict
  - typing.Any

üî¢ Constants:
  - EXCEPTION_MAP (line 176)

üèóÔ∏è  Classes:
  üìã PodcastGenerationError (line 9)
     Inherits from: Exception
     üìù Base exception for all podcast generation errors
     Methods:
       - __init__(self, message, error_code, details) (line 12)
       - __str__(self) (line 17)

  üìã ConfigurationError (line 23)
     Inherits from: PodcastGenerationError
     üìù Raised when there's a configuration problem
     Methods:
       - __init__(self, message, config_key) (line 26)

  üìã ContentFetchError (line 31)
     Inherits from: PodcastGenerationError
     üìù Raised when content fetching fails
     Methods:
       - __init__(self, message, source, url) (line 34)

  üìã ContentValidationError (line 40)
     Inherits from: PodcastGenerationError
     üìù Raised when content validation fails
     Methods:
       - __init__(self, message, validation_type) (line 43)

  üìã ScriptGenerationError (line 48)
     Inherits from: PodcastGenerationError
     üìù Raised when script generation fails
     Methods:
       - __init__(self, message, style, article_id) (line 51)

  üìã ScriptProcessingError (line 57)
     Inherits from: PodcastGenerationError
     üìù Raised when script processing fails
     Methods:
       - __init__(self, message, processing_type) (line 60)

  üìã AudioGenerationError (line 65)
     Inherits from: PodcastGenerationError
     üìù Raised when audio generation fails
     Methods:
       - __init__(self, message, voice, provider) (line 68)

  üìã AudioProcessingError (line 74)
     Inherits from: PodcastGenerationError
     üìù Raised when audio processing fails
     Methods:
       - __init__(self, message, processing_type, audio_file) (line 77)

  üìã CacheError (line 83)
     Inherits from: PodcastGenerationError
     üìù Raised when cache operations fail
     Methods:
       - __init__(self, message, cache_key, operation) (line 86)

  üìã ValidationError (line 92)
     Inherits from: PodcastGenerationError
     üìù Raised when validation fails
     Methods:
       - __init__(self, message, field, value) (line 95)

  üìã APIError (line 101)
     Inherits from: PodcastGenerationError
     üìù Raised when external API calls fail
     Methods:
       - __init__(self, message, api_name, status_code) (line 104)

  üìã RateLimitError (line 110)
     Inherits from: APIError
     üìù Raised when API rate limits are exceeded
     Methods:
       - __init__(self, message, retry_after) (line 113)

  üìã AuthenticationError (line 118)
     Inherits from: APIError
     üìù Raised when API authentication fails
     Methods:
       - __init__(self, message) (line 121)

  üìã QuotaExceededError (line 125)
     Inherits from: APIError
     üìù Raised when API quota is exceeded
     Methods:
       - __init__(self, message, quota_type) (line 128)

  üìã PipelineError (line 133)
     Inherits from: PodcastGenerationError
     üìù Raised when pipeline execution fails
     Methods:
       - __init__(self, message, step) (line 136)

  üìã TimeoutError (line 141)
     Inherits from: PodcastGenerationError
     üìù Raised when operations timeout
     Methods:
       - __init__(self, message, timeout_duration) (line 144)

  üìã DependencyError (line 149)
     Inherits from: PodcastGenerationError
     üìù Raised when required dependencies are missing
     Methods:
       - __init__(self, message, dependency) (line 152)

  üìã StorageError (line 157)
     Inherits from: PodcastGenerationError
     üìù Raised when storage operations fail
     Methods:
       - __init__(self, message, path, operation) (line 160)

  üìã QualityError (line 166)
     Inherits from: PodcastGenerationError
     üìù Raised when quality checks fail
     Methods:
       - __init__(self, message, quality_check, threshold) (line 169)

‚öôÔ∏è  Functions:
  - get_exception_class(error_code) (line 198)
    üìù Get exception class by error code
  - create_exception(error_code, message) (line 203)
    üìù Create exception instance by error code


================================================================================
FILE: src/core/interfaces.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/core/interfaces.py
Size: 8,204 bytes
Extension: .py

üìù File Docstring:
Core interfaces and abstract base classes for the podcast generation system.
These define the contracts that all implementations must follow.

üì¶ Imports:
  - abc.ABC
  - abc.abstractmethod
  - typing.Dict
  - typing.List
  - typing.Optional
  - typing.Any
  - typing.Protocol
  - dataclasses.dataclass
  - enum.Enum

üî¢ Constants:
  - PENDING (line 14)
  - PROCESSING (line 15)
  - COMPLETED (line 16)
  - FAILED (line 17)
  - CANCELLED (line 18)

üèóÔ∏è  Classes:
  üìã ProcessingStatus (line 12)
     Inherits from: Enum
     üìù Status of processing operations

  üìã ProcessingResult (line 22)
     üìù Standard result format for all processing operations
     Methods:
       - is_success(self) (line 30)
       - is_failure(self) (line 34)

  üìã ContentFetcher (line 39)
     Inherits from: ABC
     üìù Interface for fetching content from various sources
     Methods:
       - fetch_article(self, identifier) (line 43)
         üìù Fetch a single article by identifier
       - fetch_trending(self, count) (line 48)
         üìù Fetch trending articles
       - fetch_featured(self, count) (line 53)
         üìù Fetch featured articles
       - search_articles(self, query, limit) (line 58)
         üìù Search for articles matching query

  üìã ContentProcessor (line 63)
     Inherits from: ABC
     üìù Interface for processing and transforming content
     Methods:
       - process_article(self, article) (line 67)
         üìù Process a single article
       - batch_process(self, articles) (line 72)
         üìù Process multiple articles

  üìã ScriptGenerator (line 78)
     Inherits from: ABC
     üìù Interface for generating podcast scripts
     Methods:
       - generate_script(self, content, style, custom_instructions, target_duration) (line 82)
         üìù Generate a podcast script from content
       - get_available_styles(self) (line 91)
         üìù Get available script styles

  üìã ScriptProcessor (line 96)
     Inherits from: ABC
     üìù Interface for processing and enhancing scripts
     Methods:
       - process_for_tts(self, script) (line 100)
         üìù Process script for text-to-speech optimization
       - validate_script(self, script) (line 105)
         üìù Validate script format and content

  üìã AudioGenerator (line 111)
     Inherits from: ABC
     üìù Interface for generating audio from scripts
     Methods:
       - generate_audio(self, script, voice, format) (line 115)
         üìù Generate audio from script
       - get_available_voices(self) (line 123)
         üìù Get available TTS voices

  üìã AudioProcessor (line 128)
     Inherits from: ABC
     üìù Interface for post-processing audio
     Methods:
       - enhance_audio(self, audio_path, enhancements) (line 132)
         üìù Apply enhancements to audio
       - combine_audio(self, audio_files) (line 139)
         üìù Combine multiple audio files

  üìã CacheManager (line 145)
     Inherits from: ABC
     üìù Interface for managing cached content
     Methods:
       - store(self, key, data, metadata) (line 149)
         üìù Store data in cache
       - retrieve(self, key) (line 154)
         üìù Retrieve data from cache
       - list_items(self, pattern) (line 159)
         üìù List cached items
       - clear(self, pattern) (line 164)
         üìù Clear cache items

  üìã ConfigManager (line 170)
     Inherits from: ABC
     üìù Interface for managing configuration
     Methods:
       - get(self, key, default) (line 174)
         üìù Get configuration value
       - set(self, key, value) (line 179)
         üìù Set configuration value
       - validate_config(self) (line 184)
         üìù Validate current configuration

  üìã PipelineStep (line 190)
     Inherits from: ABC
     üìù Interface for individual pipeline steps
     Methods:
       - execute(self, input_data) (line 194)
         üìù Execute this pipeline step
       - can_process(self, input_data) (line 199)
         üìù Check if this step can process the input

  üìã Pipeline (line 204)
     Inherits from: ABC
     üìù Interface for processing pipelines
     Methods:
       - add_step(self, step) (line 208)
         üìù Add a step to the pipeline
       - execute(self, input_data) (line 213)
         üìù Execute the entire pipeline

  üìã EventListener (line 219)
     Inherits from: Protocol
     üìù Protocol for event listeners
     Methods:
       - handle_event(self, event_type, data) (line 222)
         üìù Handle an event

  üìã EventBus (line 227)
     Inherits from: ABC
     üìù Interface for event bus system
     Methods:
       - subscribe(self, event_type, listener) (line 231)
         üìù Subscribe to events
       - publish(self, event_type, data) (line 236)
         üìù Publish an event

  üìã ComponentFactory (line 242)
     Inherits from: ABC
     üìù Interface for creating system components
     Methods:
       - create_content_fetcher(self) (line 246)
         üìù Create content fetcher
       - create_script_generator(self) (line 251)
         üìù Create script generator
       - create_audio_generator(self) (line 256)
         üìù Create audio generator

  üìã ServiceHealth (line 262)
     Inherits from: ABC
     üìù Interface for service health checks
     Methods:
       - check_health(self) (line 266)
         üìù Check service health
       - get_status(self) (line 271)
         üìù Get detailed service status

  üìã QualityChecker (line 277)
     Inherits from: ABC
     üìù Interface for quality assessment
     Methods:
       - assess_content(self, content) (line 281)
         üìù Assess content quality
       - assess_script(self, script) (line 286)
         üìù Assess script quality
       - assess_audio(self, audio_path) (line 291)
         üìù Assess audio quality

  üìã MetricsCollector (line 297)
     Inherits from: ABC
     üìù Interface for collecting system metrics
     Methods:
       - record_metric(self, name, value, tags) (line 301)
         üìù Record a metric
       - get_metrics(self, pattern) (line 306)
         üìù Get collected metrics


================================================================================
FILE: src/core/models.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/core/models.py
Size: 14,301 bytes
Extension: .py

üìù File Docstring:
Core domain models for the podcast generation system.
These represent the key entities and value objects used throughout the system.

üì¶ Imports:
  - dataclasses.dataclass
  - dataclasses.field
  - typing.Dict
  - typing.List
  - typing.Optional
  - typing.Any
  - typing.Union
  - datetime.datetime
  - enum.Enum
  - json

üî¢ Constants:
  - WIKIPEDIA_ARTICLE (line 15)
  - NEWS_ARTICLE (line 16)
  - BLOG_POST (line 17)
  - RESEARCH_PAPER (line 18)
  - CUSTOM_TEXT (line 19)
  - CONVERSATIONAL (line 24)
  - EDUCATIONAL (line 25)
  - NARRATIVE (line 26)
  - INTERVIEW (line 27)
  - NEWS (line 28)
  - DOCUMENTARY (line 29)
  - MP3 (line 34)
  - WAV (line 35)
  - OGG (line 36)
  - M4A (line 37)
  - LOW (line 42)
  - MEDIUM (line 43)
  - HIGH (line 44)
  - PREMIUM (line 45)

üèóÔ∏è  Classes:
  üìã ContentType (line 13)
     Inherits from: Enum
     üìù Types of content that can be processed

  üìã ScriptStyle (line 22)
     Inherits from: Enum
     üìù Available script styles

  üìã AudioFormat (line 32)
     Inherits from: Enum
     üìù Supported audio formats

  üìã QualityLevel (line 40)
     Inherits from: Enum
     üìù Quality levels for content and processing

  üìã ContentMetadata (line 49)
     üìù Metadata about content
     Methods:
       - to_dict(self) (line 61)
         üìù Convert to dictionary

  üìã Article (line 77)
     üìù Represents an article from any source
     Methods:
       - __post_init__(self) (line 89)
         üìù Calculate word count if not provided
       - to_dict(self) (line 94)
         üìù Convert to dictionary for serialization
       - from_dict(cls, data) (line 109)
         üìù Create from dictionary

  üìã ScriptSegment (line 126)
     üìù Represents a segment of a podcast script
     Methods:
       - to_dict(self) (line 134)
         üìù Convert to dictionary

  üìã PodcastScript (line 146)
     üìù Represents a complete podcast script
     Methods:
       - __post_init__(self) (line 161)
         üìù Calculate word count if not provided
       - intro_segment(self) (line 167)
         üìù Get the intro segment
       - outro_segment(self) (line 172)
         üìù Get the outro segment
       - main_segments(self) (line 177)
         üìù Get all main content segments
       - to_dict(self) (line 181)
         üìù Convert to dictionary for serialization
       - from_dict(cls, data) (line 199)
         üìù Create from dictionary

  üìã VoiceConfig (line 219)
     üìù Configuration for TTS voice
     Methods:
       - to_dict(self) (line 228)
         üìù Convert to dictionary

  üìã AudioMetadata (line 241)
     üìù Metadata about generated audio
     Methods:
       - to_dict(self) (line 251)
         üìù Convert to dictionary

  üìã PodcastEpisode (line 265)
     üìù Represents a complete podcast episode
     Methods:
       - to_dict(self) (line 280)
         üìù Convert to dictionary for serialization
       - from_dict(cls, data) (line 298)
         üìù Create from dictionary

  üìã ProcessingJob (line 318)
     üìù Represents a processing job in the pipeline
     Methods:
       - to_dict(self) (line 331)
         üìù Convert to dictionary

  üìã PipelineConfig (line 348)
     üìù Configuration for the podcast generation pipeline
     Methods:
       - to_dict(self) (line 377)
         üìù Convert to dictionary
       - from_dict(cls, data) (line 398)
         üìù Create from dictionary


================================================================================
FILE: src/create_podcast.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/create_podcast.py
Size: 27,530 bytes
Extension: .py

‚ùå Analysis Error: argument of type 'Subscript' is not iterable

================================================================================
FILE: src/interactive_menus.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/interactive_menus.py
Size: 38,156 bytes
Extension: .py

üìù File Docstring:
Interactive Menu System - Fixed with Robust Data Handling
This module handles all user interaction with graceful error handling

üì¶ Imports:
  - sys
  - pathlib.Path
  - typing.Optional
  - traceback
  - traceback
  - traceback
  - inspect

üèóÔ∏è  Classes:
  üìã InteractiveMenus (line 9)
     üìù Handles all interactive menu operations
     Methods:
       - __init__(self, pipeline) (line 12)
         üìù Initialize with reference to main pipeline
       - run_main_menu(self) (line 20)
         üìù Run interactive menu for pipeline operations
       - _interactive_fetch_only(self) (line 70)
         üìù Interactive article fetching without script generation
       - _fetch_trending_only(self) (line 89)
         üìù Fetch trending articles without generating scripts
       - _fetch_featured_only(self) (line 141)
         üìù Fetch featured articles without generating scripts
       - _fetch_specific_only(self) (line 193)
         üìù Fetch specific topic without generating script
       - _interactive_article_to_script(self) (line 243)
         üìù Interactive script generation from any article
       - _script_from_cached_article(self) (line 259)
         üìù Create script from cached article - FIXED with robust data access
       - _script_from_new_article(self) (line 329)
         üìù Create script from newly fetched article
       - _generate_script_from_article(self, article) (line 349)
         üìù Common method to generate script from an article object
       - _interactive_complete_podcast(self) (line 512)
         üìù Interactive complete podcast generation
       - _interactive_cached_article_to_script(self) (line 564)
         üìù Interactive script generation from cached articles
       - _interactive_script_to_audio(self) (line 568)
         üìù Interactive audio generation from existing scripts
       - _interactive_post_production(self) (line 660)
         üìù Interactive post-production enhancement
       - _show_cached_scripts(self) (line 665)
         üìù Display cached scripts
       - _show_podcasts(self) (line 697)
         üìù Display generated podcasts
       - _show_styles(self) (line 737)
         üìù Display available styles with descriptions
       - _clear_cache(self) (line 760)
         üìù Interactive cache clearing
       - _clear_script_cache(self) (line 821)
         üìù Manually clear script cache
       - _clear_audio_cache(self) (line 836)
         üìù Manually clear audio cache
       - get_user_confirmation(self, message, default) (line 860)
         üìù Get user confirmation with default option
       - get_user_choice(self, options, prompt) (line 870)
         üìù Get user choice from a list of options


================================================================================
FILE: src/main.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/main.py
Size: 4,598 bytes
Extension: .py

üìù File Docstring:
Wikipedia to Podcast Pipeline - Main Entry Point

This script orchestrates the entire pipeline:
1. Fetches Wikipedia content (trending, featured, or specific topics)
2. Generates podcast scripts in various styles
3. Provides interactive menu for different operations
4. Manages the entire workflow from content to scripts

Usage:
    python main.py                    # Interactive mode
    python main.py --trending 5       # Generate 5 trending articles
    python main.py --topic "AI"       # Generate script for specific topic
    python main.py --featured 3       # Generate 3 featured articles

üì¶ Imports:
  - argparse
  - sys
  - pathlib.Path
  - pipeline.PodcastPipeline
  - traceback

‚öôÔ∏è  Functions:
  - parse_arguments() (line 33)
    üìù Parse command line arguments
  - run_command_line_mode(pipeline, args) (line 59)
    üìù Execute command line operations
  - run_interactive_mode(pipeline) (line 80)
    üìù Run the interactive menu system
  - main() (line 86)
    üìù Main entry point


================================================================================
FILE: src/pipeline.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/pipeline.py
Size: 8,583 bytes
Extension: .py

üìù File Docstring:
Core Pipeline Class - Orchestrates all components

This module contains the main PodcastPipeline class that coordinates
between content fetching, script generation, audio creation, and user interaction.

üì¶ Imports:
  - os
  - pathlib.Path
  - typing.List
  - typing.Dict
  - typing.Optional
  - dotenv.load_dotenv
  - content_fetcher.WikipediaContentFetcher
  - content_fetcher.WikipediaArticle
  - script_formatter.PodcastScriptFormatter
  - script_formatter.PodcastScript
  - article_editor.ChapterEditor
  - openai.OpenAI
  - content_pipeline.ContentProcessor
  - audio_pipeline.AudioGenerator
  - interactive_menus.InteractiveMenus

üèóÔ∏è  Classes:
  üìã PodcastPipeline (line 27)
     üìù Main pipeline orchestrator that coordinates all components
     Methods:
       - __init__(self) (line 30)
         üìù Initialize the pipeline components
       - show_status(self) (line 77)
         üìù Show current pipeline status and cached content
       - fetch_and_generate_trending(self, count, style) (line 105)
         üìù Fetch trending articles and generate scripts
       - fetch_and_generate_featured(self, count, style) (line 109)
         üìù Fetch featured articles and generate scripts
       - generate_single_topic(self, topic, style, custom_instructions, target_duration) (line 113)
         üìù Generate script for a specific topic
       - generate_complete_podcast(self, topic, style, voice, custom_instructions, audio_enabled, target_duration) (line 121)
         üìù Generate complete podcast: content ‚Üí script ‚Üí audio
       - list_podcasts(self) (line 140)
         üìù List all created podcasts
       - interactive_mode(self) (line 147)
         üìù Run interactive menu for pipeline operations
       - _make_safe_filename(self, title) (line 152)
         üìù Convert title to safe filename
       - _choose_style(self) (line 157)
         üìù Interactive style selection
       - _choose_duration(self) (line 177)
         üìù Interactive duration selection


================================================================================
FILE: src/podcast_post_production.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/podcast_post_production.py
Size: 22,297 bytes
Extension: .py

üìù File Docstring:
Podcast Post-Production System

This module adds professional finishing touches to generated podcasts:
- Custom intro/outro music
- Jingles and sound effects
- Audio mixing and mastering
- Background music layers
- Professional podcast formatting

Features:
- Music library management
- Custom intro/outro creation
- Multi-track audio mixing
- Volume leveling and mastering
- Batch post-production processing

üì¶ Imports:
  - os
  - json
  - subprocess
  - tempfile
  - pathlib.Path
  - datetime.datetime
  - typing.Dict
  - typing.List
  - typing.Optional
  - typing.Tuple
  - dataclasses.dataclass
  - requests
  - dotenv.load_dotenv
  - openai.OpenAI

üèóÔ∏è  Classes:
  üìã AudioTrack (line 32)
     üìù Represents an audio track for mixing

  üìã PodcastTemplate (line 44)
     üìù Template for podcast post-production

  üìã PodcastPostProduction (line 58)
     üìù Advanced post-production system for podcasts
     Methods:
       - __init__(self, assets_dir) (line 61)
         üìù Initialize post-production system
       - enhance_podcast(self, input_audio, template_name, custom_intro, custom_outro, background_music, output_name) (line 87)
         üìù Apply professional post-production to a podcast

Args:
    input_audio: Path to the main podcast audio
    template_name: Post-production template to use
    custom_intro: Custom intro music file
    custom_outro: Custom outro music file  
    background_music: Background music file
    output_name: Custom output filename
    
Returns:
    Path to enhanced podcast file
       - create_custom_intro(self, title, host_name, voice, music_file) (line 153)
         üìù Create a custom intro for the podcast series

Args:
    title: Podcast series title
    host_name: Host name to announce
    voice: TTS voice for intro
    music_file: Background music file
    
Returns:
    Path to created intro file
       - download_free_music(self, music_type) (line 232)
         üìù Download free music from various sources for podcast use

Args:
    music_type: Type of music ('intro', 'outro', 'background', 'jingle')
    
Returns:
    List of downloaded music file paths
       - list_available_assets(self) (line 299)
         üìù List all available audio assets
       - create_podcast_series_package(self, series_name, episodes, template_name) (line 323)
         üìù Create a complete podcast series with consistent branding

Args:
    series_name: Name of the podcast series
    episodes: List of episode audio files
    template_name: Template to apply to all episodes
    
Returns:
    Path to series package directory
       - _create_default_templates(self) (line 392)
         üìù Create default post-production templates
       - _load_template(self, template_name) (line 439)
         üìù Load a post-production template
       - _build_audio_timeline(self, main_audio, template, custom_intro, custom_outro, background_music) (line 453)
         üìù Build timeline of audio tracks for mixing
       - _mix_audio_tracks(self, timeline, output_path) (line 516)
         üìù Mix multiple audio tracks using ffmpeg
       - _estimate_audio_duration(self, audio_file) (line 549)
         üìù Estimate audio file duration
       - _check_ffmpeg(self) (line 565)
         üìù Check if ffmpeg is available

‚öôÔ∏è  Functions:
  - example_usage() (line 576)
    üìù Example of how to use the post-production system


================================================================================
FILE: src/raw_articles/Python (programming language).json
================================================================================
Path: /Users/itamar/projects/wikipedia/src/raw_articles/Python (programming language).json
Size: 52,526 bytes
Extension: .json

Lines:
  46

Size:
  52472

Type:
  text


================================================================================
FILE: src/script_formatter.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/script_formatter.py
Size: 27,260 bytes
Extension: .py

üìù File Docstring:
Script Formatter - Bridge to New Modular System

This file maintains compatibility with existing code while using the new modular system.
It exports the old PodcastScriptFormatter class that your existing code expects.

üì¶ Imports:
  - os
  - typing.Optional
  - typing.Dict
  - typing.Any
  - typing.List
  - datetime.datetime
  - pathlib.Path
  - core.PodcastScript
  - script_generation.create_script_generator
  - openai.OpenAI
  - json
  - re
  - core.Article
  - core.ContentType
  - core.ContentMetadata
  - openai.OpenAI
  - traceback
  - traceback
  - time
  - dotenv.load_dotenv
  - json

üèóÔ∏è  Classes:
  üìã PodcastScriptFormatter (line 14)
     üìù Compatibility wrapper for the old PodcastScriptFormatter.
This allows existing code to work while using the new modular system underneath.
     Methods:
       - __init__(self, openai_api_key, cache_dir) (line 20)
         üìù Initialize with same interface as old formatter
       - _get_openai_api_key(self) (line 37)
         üìù Get OpenAI API key from various sources
       - _initialize_new_system(self) (line 66)
         üìù Initialize the new modular system
       - format_article_to_script(self, article, style, custom_instructions, target_duration, model) (line 82)
         üìù Convert article to script using new system or fallback.
Returns old-style result for compatibility.
       - _generate_with_new_system(self, article, style, custom_instructions, target_duration) (line 104)
         üìù Generate script using new modular system
       - _generate_with_fallback(self, article, style, custom_instructions, target_duration, model) (line 186)
         üìù Fallback generation using direct OpenAI API with iterative approach
       - _save_fallback_script_to_cache(self, script) (line 254)
         üìù Save fallback script to cache
       - _generate_single_script(self, client, article, style, custom_instructions, target_words, model) (line 302)
         üìù Generate script in single API call
       - _generate_long_script_iteratively(self, client, article, style, custom_instructions, target_words, model) (line 346)
         üìù Generate long script by building it section by section
       - _convert_article_format(self, old_article) (line 419)
         üìù Convert old WikipediaArticle to new Article model
       - _convert_script_to_old_format(self, new_script) (line 455)
         üìù Convert new PodcastScript to old format
       - get_available_styles(self) (line 496)
         üìù Get available styles in old format
       - test_api_connection(self) (line 532)
         üìù Test API connection
       - list_cached_scripts(self, style) (line 564)
         üìù List cached scripts
       - batch_generate_scripts(self, articles, style, custom_instructions) (line 601)
         üìù Batch generate scripts

  üìã FallbackScript (line 220)
     Methods:
       - __init__(self, title, style, script_content, target_duration, custom_instructions, actual_duration) (line 221)

  üìã ScriptWrapper (line 123)
     Methods:
       - __init__(self, podcast_script) (line 124)
       - __getitem__(self, key) (line 155)
         üìù Allow dictionary-style access
       - __setitem__(self, key, value) (line 159)
         üìù Allow dictionary-style assignment
       - get(self, key, default) (line 163)
         üìù Dictionary-style get method
       - keys(self) (line 167)
         üìù Dictionary-style keys method
       - items(self) (line 171)
         üìù Dictionary-style items method


================================================================================
FILE: src/script_generation/__init__.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/script_generation/__init__.py
Size: 1,781 bytes
Extension: .py

üìù File Docstring:
Script Generation Package

This package handles all aspects of podcast script generation:
- Content processing and preparation
- Script generation with various styles
- TTS optimization and processing
- Instruction processing and validation
- Caching and persistence

The package is organized into focused modules:
- generators: Core script generation logic
- styles: Style definitions and templates
- processors: TTS processing and optimization
- cache: Script caching and persistence
- validators: Script validation and quality checks

üì¶ Imports:
  - script_generation.generators.ScriptGeneratorImpl
  - script_generation.generators.ChapterBasedGenerator
  - script_generation.generators.ConversationalGenerator
  - script_generation.styles.StyleManager
  - script_generation.styles.StyleTemplate
  - script_generation.generators.ScriptGeneratorImpl

‚öôÔ∏è  Functions:
  - create_script_generator(config) (line 71)
    üìù Create a configured script generator instance


================================================================================
FILE: src/script_generation/cache.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/script_generation/cache.py
Size: 686 bytes
Extension: .py

üìù File Docstring:
Script Caching Module - Stub Version
This is a temporary stub to fix imports. Will be fully implemented next.

üì¶ Imports:
  - typing.Optional
  - typing.Any

üèóÔ∏è  Classes:
  üìã ScriptCache (line 9)
     üìù Stub script cache
     Methods:
       - __init__(self, cache_dir) (line 12)
       - get(self, key) (line 16)
         üìù Get from cache - stub implementation
       - set(self, key, value) (line 20)
         üìù Set in cache - stub implementation

  üìã CacheManager (line 25)
     üìù Stub cache manager
     Methods:
       - __init__(self) (line 28)


================================================================================
FILE: src/script_generation/generators.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/script_generation/generators.py
Size: 29,116 bytes
Extension: .py

üìù File Docstring:
Script Generation Logic

This module contains the core script generation implementations.
Separated from the original script_formatter.py for better modularity.

üì¶ Imports:
  - os
  - re
  - datetime.datetime
  - typing.Dict
  - typing.List
  - typing.Optional
  - typing.Any
  - pathlib.Path
  - core.ScriptGenerator
  - core.ProcessingResult
  - core.ProcessingStatus
  - core.Article
  - core.PodcastScript
  - core.ScriptSegment
  - core.ScriptStyle
  - core.ScriptGenerationError
  - core.ConfigurationError
  - script_generation.styles.StyleManager
  - script_generation.processors.TTSProcessor
  - script_generation.processors.InstructionProcessor
  - script_generation.cache.ScriptCache
  - script_generation.validators.ScriptValidator
  - hashlib
  - openai.OpenAI
  - article_editor.ChapterEditor
  - dotenv.load_dotenv

üèóÔ∏è  Classes:
  üìã ScriptGeneratorImpl (line 32)
     Inherits from: ScriptGenerator
     üìù Main script generator implementation.
Handles the core logic of converting articles to podcast scripts.
     Methods:
       - __init__(self, config) (line 38)
         üìù Initialize the script generator
       - _setup_openai_client(self) (line 52)
         üìù Setup OpenAI client with API key validation
       - _get_openai_api_key(self) (line 78)
         üìù Get OpenAI API key from various sources
       - generate_script(self, article, style, custom_instructions, target_duration) (line 108)
         üìù Generate a podcast script from an article.
Main entry point that orchestrates the entire process.
       - _validate_inputs(self, article, style) (line 189)
         üìù Validate inputs before processing
       - _generate_cache_key(self, article, style, custom_instructions) (line 206)
         üìù Generate a unique cache key for the script
       - _prepare_article_content(self, article) (line 215)
         üìù Prepare article content for script generation
       - _generate_script_with_openai(self, article, style_config, prepared_content, custom_instructions, target_duration) (line 246)
         üìù Generate script using OpenAI API
       - _build_generation_prompt(self, article, style_config, prepared_content, custom_instructions, target_duration) (line 307)
         üìù Build the generation prompt for OpenAI
       - _get_system_prompt(self) (line 360)
         üìù Get the system prompt for script generation
       - _calculate_max_tokens(self, model, prompt, target_duration) (line 387)
         üìù Calculate maximum tokens for the response based on target duration
       - _process_generated_script(self, script_text, article, style, custom_instructions) (line 419)
         üìù Process the generated script into a PodcastScript object
       - _parse_script_segments(self, script_text) (line 474)
         üìù Parse script into segments
       - _truncate_prompt_for_model(self, prompt, model) (line 493)
         üìù Truncate prompt to fit model context window
       - _estimate_script_duration(self, text) (line 538)
         üìù Estimate script duration in seconds
       - get_available_styles(self) (line 550)
         üìù Get available script styles
       - __init__(self, config) (line 558)
       - _setup_chapter_editor(self) (line 562)
         üìù Setup chapter editor for long articles
       - generate_script(self, article, style, custom_instructions, target_duration) (line 571)
         üìù Generate script with chapter-based processing for long articles
       - _should_use_chapter_editing(self, article, target_duration) (line 585)
         üìù Determine if chapter editing should be used
       - _generate_with_chapter_editing(self, article, style, custom_instructions, target_duration) (line 589)
         üìù Generate script using chapter-by-chapter editing
       - _combine_chapter_scripts(self, chapter_scripts, article, style) (line 647)
         üìù Combine multiple chapter scripts into one

  üìã ConversationalGenerator (line 679)
     Inherits from: ScriptGeneratorImpl
     üìù Specialized generator for conversational style scripts.
Adds extra conversational elements and storytelling techniques.
     Methods:
       - _get_system_prompt(self) (line 685)
         üìù Get specialized system prompt for conversational scripts


================================================================================
FILE: src/script_generation/processors.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/script_generation/processors.py
Size: 980 bytes
Extension: .py

üìù File Docstring:
TTS Processing Module - Stub Version
This is a temporary stub to fix imports. Will be fully implemented next.

üì¶ Imports:
  - core.ProcessingResult
  - core.ProcessingStatus
  - typing.Dict
  - typing.Any

üèóÔ∏è  Classes:
  üìã TTSProcessor (line 10)
     üìù Stub TTS processor
     Methods:
       - process_script(self, script_text) (line 13)
         üìù Process script for TTS - stub implementation

  üìã InstructionProcessor (line 22)
     üìù Stub instruction processor
     Methods:
       - count_instructions(self, script_text) (line 25)
         üìù Count instructions in script - stub implementation

  üìã ScriptCleaner (line 30)
     üìù Stub script cleaner
     Methods:
       - clean_for_tts(self, script_text) (line 33)
         üìù Clean script for TTS - stub implementation


================================================================================
FILE: src/script_generation/styles.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/script_generation/styles.py
Size: 15,275 bytes
Extension: .py

üìù File Docstring:
Style Management System

This module handles all script styles and templates.
Separated from the main generator for better organization and extensibility.

üì¶ Imports:
  - typing.Dict
  - typing.Any
  - typing.Optional
  - typing.List
  - dataclasses.dataclass
  - enum.Enum

üî¢ Constants:
  - CONVERSATIONAL (line 15)
  - EDUCATIONAL (line 16)
  - NARRATIVE (line 17)
  - PROFESSIONAL (line 18)

üèóÔ∏è  Classes:
  üìã StyleCategory (line 13)
     Inherits from: Enum
     üìù Categories of script styles

  üìã StyleTemplate (line 22)
     üìù Template for a script style
     Methods:
       - get_formatted_template(self) (line 32)
         üìù Get template with parameters filled in

  üìã StyleManager (line 37)
     üìù Manages all available script styles and templates.
Provides a clean interface for style configuration.
     Methods:
       - __init__(self) (line 43)
       - _initialize_default_styles(self) (line 47)
         üìù Initialize default style templates
       - get_style_config(self, style_name) (line 269)
         üìù Get configuration for a specific style
       - get_style_template(self, style_name) (line 283)
         üìù Get template text for a specific style
       - get_available_styles(self) (line 290)
         üìù Get all available styles with their information
       - is_valid_style(self, style_name) (line 304)
         üìù Check if a style name is valid
       - add_custom_style(self, style) (line 308)
         üìù Add a custom style template
       - get_styles_by_category(self, category) (line 313)
         üìù Get all styles in a specific category
       - get_style_recommendations(self, article_length, target_duration, content_type) (line 320)
         üìù Get style recommendations based on content characteristics


================================================================================
FILE: src/script_generation/validators.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/script_generation/validators.py
Size: 1,127 bytes
Extension: .py

üìù File Docstring:
Script Validation Module - Stub Version
This is a temporary stub to fix imports. Will be fully implemented next.

üì¶ Imports:
  - core.ProcessingResult
  - core.ProcessingStatus

üèóÔ∏è  Classes:
  üìã ScriptValidator (line 9)
     üìù Stub script validator
     Methods:
       - validate_script(self, script_text) (line 12)
         üìù Validate script - stub implementation

  üìã QualityChecker (line 20)
     üìù Stub quality checker
     Methods:
       - check_quality(self, script_text) (line 23)
         üìù Check quality - stub implementation

  üìã InstructionValidator (line 31)
     üìù Stub instruction validator
     Methods:
       - validate_instructions(self, script_text) (line 34)
         üìù Validate instructions - stub implementation


================================================================================
FILE: src/tts_processor.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/tts_processor.py
Size: 10,503 bytes
Extension: .py

üìù File Docstring:
TTS Processing Module
Handles enhanced text-to-speech processing with SSML support

üì¶ Imports:
  - re
  - typing.Dict
  - typing.List
  - typing.Tuple
  - google.cloud.texttospeech

üî¢ Constants:
  - TTS_ENHANCEMENT_INSTRUCTIONS (line 209)

üèóÔ∏è  Classes:
  üìã SSMLProcessor (line 10)
     üìù Processes TTS instructions and converts them to SSML or audio cues
     Methods:
       - __init__(self) (line 13)
       - process_script_for_tts(self, script_text, use_ssml) (line 64)
         üìù Process script text for optimal TTS output

Args:
    script_text: Raw script text with TTS instructions
    use_ssml: Whether to use SSML (Google Cloud supports this)
    
Returns:
    Processed text ready for TTS
       - _fix_pronunciations(self, text) (line 95)
         üìù Apply pronunciation fixes
       - _convert_numbers(self, text) (line 101)
         üìù Convert years and numbers to words
       - _convert_to_ssml(self, text) (line 155)
         üìù Convert TTS instructions to SSML
       - _convert_to_pauses(self, text) (line 184)
         üìù Convert TTS instructions to natural pauses (for non-SSML TTS)

‚öôÔ∏è  Functions:
  - replace_year(match) (line 104)


================================================================================
FILE: src/utils/__init__.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/utils/__init__.py
Size: 469 bytes
Extension: .py

üì¶ Imports:
  - http_client.HTTPClient
  - http_client.create_wikipedia_client
  - http_client.create_openai_client
  - filesystem.FileManager
  - filesystem.create_cache_manager
  - filesystem.create_output_manager
  - async_utils.AsyncBatch
  - async_utils.AsyncRetry
  - async_utils.create_batch_processor


================================================================================
FILE: src/utils/async_utils.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/utils/async_utils.py
Size: 11,717 bytes
Extension: .py

‚ùå Analysis Error: argument of type 'BinOp' is not iterable

================================================================================
FILE: src/utils/filesystem.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/utils/filesystem.py
Size: 12,668 bytes
Extension: .py

‚ùå Analysis Error: argument of type 'Call' is not iterable

================================================================================
FILE: src/utils/http_client.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/utils/http_client.py
Size: 6,723 bytes
Extension: .py

‚ùå Analysis Error: argument of type 'Call' is not iterable

