================================================================================
PROJECT CODE ANALYSIS REPORT
================================================================================

Project Path: /Users/itamar/projects/wikipedia
Total Files: 28
Generated: /Users/itamar/projects/wikipedia

FILE TYPES SUMMARY:
----------------------------------------
.env            :    2 files
.example        :    1 files
.json           :    8 files
.md             :    1 files
.py             :   14 files
.txt            :    2 files

================================================================================
FILE: README.md
================================================================================
Path: /Users/itamar/projects/wikipedia/README.md
Size: 189 bytes
Extension: .md

Lines:
  3

Size:
  184

Type:
  text


================================================================================
FILE: analyze_codebase.py
================================================================================
Path: /Users/itamar/projects/wikipedia/analyze_codebase.py
Size: 7,688 bytes
Extension: .py

‚ùå Analysis Error: argument of type 'Subscript' is not iterable

================================================================================
FILE: config/api_keys.env
================================================================================
Path: /Users/itamar/projects/wikipedia/config/api_keys.env
Size: 223 bytes
Extension: .env

Lines:
  2

Size:
  223

Type:
  text


================================================================================
FILE: config/api_keys.env.example
================================================================================
Path: /Users/itamar/projects/wikipedia/config/api_keys.env.example
Size: 377 bytes
Extension: .example

Lines:
  10

Size:
  377

Type:
  text


================================================================================
FILE: processed_scripts/conversational/Aryna_Sabalenka_20250711_1926.json
================================================================================
Path: /Users/itamar/projects/wikipedia/processed_scripts/conversational/Aryna_Sabalenka_20250711_1926.json
Size: 10,030 bytes
Extension: .json

Lines:
  58

Size:
  10028

Type:
  text


================================================================================
FILE: processed_scripts/conversational/Aryna_Sabalenka_20250711_1938.json
================================================================================
Path: /Users/itamar/projects/wikipedia/processed_scripts/conversational/Aryna_Sabalenka_20250711_1938.json
Size: 12,801 bytes
Extension: .json

Lines:
  94

Size:
  12799

Type:
  text


================================================================================
FILE: processed_scripts/conversational/Aryna_Sabalenka_20250711_2118.json
================================================================================
Path: /Users/itamar/projects/wikipedia/processed_scripts/conversational/Aryna_Sabalenka_20250711_2118.json
Size: 15,899 bytes
Extension: .json

Lines:
  78

Size:
  15845

Type:
  text


================================================================================
FILE: processed_scripts/conversational/Donald_Trump_20250623_0027.json
================================================================================
Path: /Users/itamar/projects/wikipedia/processed_scripts/conversational/Donald_Trump_20250623_0027.json
Size: 9,841 bytes
Extension: .json

Lines:
  54

Size:
  9835

Type:
  text


================================================================================
FILE: processed_scripts/conversational/Zohran_Mamdani_20250628_1826.json
================================================================================
Path: /Users/itamar/projects/wikipedia/processed_scripts/conversational/Zohran_Mamdani_20250628_1826.json
Size: 8,069 bytes
Extension: .json

Lines:
  46

Size:
  8061

Type:
  text


================================================================================
FILE: processed_scripts/conversational/Zohran_Mamdani_20250628_1836.json
================================================================================
Path: /Users/itamar/projects/wikipedia/processed_scripts/conversational/Zohran_Mamdani_20250628_1836.json
Size: 8,655 bytes
Extension: .json

Lines:
  50

Size:
  8655

Type:
  text


================================================================================
FILE: processed_scripts/conversational/Zohran_Mamdani_20250628_1839.json
================================================================================
Path: /Users/itamar/projects/wikipedia/processed_scripts/conversational/Zohran_Mamdani_20250628_1839.json
Size: 9,599 bytes
Extension: .json

Lines:
  50

Size:
  9599

Type:
  text


================================================================================
FILE: project_analysis.txt
================================================================================
Path: /Users/itamar/projects/wikipedia/project_analysis.txt
Size: 0 bytes
Extension: .txt

Type:
  text


================================================================================
FILE: requirements.txt
================================================================================
Path: /Users/itamar/projects/wikipedia/requirements.txt
Size: 360 bytes
Extension: .txt

Lines:
  20

Size:
  360

Type:
  text


================================================================================
FILE: run_tests.py
================================================================================
Path: /Users/itamar/projects/wikipedia/run_tests.py
Size: 29,967 bytes
Extension: .py

‚ùå Analysis Error: argument of type 'Constant' is not iterable

================================================================================
FILE: src/api_diagnostic.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/api_diagnostic.py
Size: 1,139 bytes
Extension: .py

üì¶ Imports:
  - content_fetcher.WikipediaContentFetcher
  - script_formatter.PodcastScriptFormatter
  - traceback


================================================================================
FILE: src/article_editor.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/article_editor.py
Size: 8,166 bytes
Extension: .py

üì¶ Imports:
  - openai
  - re
  - time
  - typing.List
  - typing.Tuple
  - json
  - os

üî¢ Constants:
  - API_KEY (line 204)

üèóÔ∏è  Classes:
  üìã ChapterEditor (line 8)
     Methods:
       - __init__(self, api_key) (line 9)
         üìù Initialize the chapter editor with OpenAI API key.
       - split_into_chapters(self, article) (line 13)
         üìù Split article into chapters based on headers or natural breaks.
Returns list of (title, content) tuples.
       - _split_by_length(self, text, max_words) (line 50)
         üìù Split text into chunks of approximately max_words.
       - edit_chapter(self, title, content, instructions) (line 63)
         üìù Edit a single chapter using OpenAI API.
       - edit_article_by_chapters(self, article, instructions, delay) (line 95)
         üìù Edit an entire article by processing each chapter separately.

Args:
    article: The full article text
    instructions: Editing instructions to apply to each chapter
    delay: Delay between API calls to avoid rate limits

Returns:
    The fully edited article
       - save_progress(self, chapters, filename) (line 139)
         üìù Save editing progress to a JSON file.
       - load_progress(self, filename) (line 149)
         üìù Load editing progress from a JSON file.

‚öôÔ∏è  Functions:
  - edit_long_article(article_text, editing_instructions, api_key) (line 158)
    üìù Main function to edit a long article chapter by chapter.

Args:
    article_text: The full article to edit
    editing_instructions: Instructions for how to edit each chapter
    api_key: OpenAI API key

Returns:
    The fully edited article
  - edit_article_from_file(input_file, output_file, instructions, api_key) (line 174)
    üìù Edit an article from a file and save the result.

Args:
    input_file: Path to input article file
    output_file: Path to save edited article
    instructions: Editing instructions
    api_key: OpenAI API key


================================================================================
FILE: src/audio_pipeline.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/audio_pipeline.py
Size: 36,791 bytes
Extension: .py

üìù File Docstring:
Audio Generation Pipeline with Google Cloud TTS

This module handles all audio-related operations:
- Text-to-speech generation using Google Cloud TTS
- Production effects and processing
- Audio file management
- Podcast package creation

üì¶ Imports:
  - json
  - subprocess
  - re
  - os
  - datetime.datetime
  - pathlib.Path
  - typing.Dict
  - typing.List
  - typing.Optional
  - typing.Tuple
  - google.cloud.texttospeech
  - time
  - script_formatter.PodcastScript
  - traceback
  - traceback
  - time
  - traceback
  - shutil

üèóÔ∏è  Classes:
  üìã AudioGenerator (line 23)
     üìù Handles audio generation and processing with Google Cloud TTS
     Methods:
       - __init__(self, pipeline) (line 26)
         üìù Initialize with reference to main pipeline
       - generate_complete_podcast(self, script, voice, topic, style) (line 40)
         üìù Generate complete podcast package with audio
       - generate_from_script_file(self, script_filename) (line 68)
         üìù Generate audio from a cached script file

Args:
    script_filename: Name of the script file to load
    
Returns:
    Audio generation result or None if failed
       - _load_script_from_cache(self, script_filename) (line 134)
         üìù Load a script from the cache directory

Args:
    script_filename: Name of the script file
    
Returns:
    Script data dict or None if not found
       - _generate_audio_gcp(self, script, voice) (line 181)
         üìù Generate audio using Google Cloud TTS with fallback strategies
       - _generate_chunked_audio_conservative(self, script_text, voice, script, production_timeline) (line 285)
         üìù Generate audio in very small chunks for maximum reliability
       - _get_voice_config(self, voice_name) (line 416)
         üìù Get voice configuration for Google Cloud TTS
       - _synthesize_speech_gcp(self, text, voice_config) (line 479)
         üìù Synthesize speech using Google Cloud TTS with retry logic
       - _combine_audio_files(self, audio_files, output_path) (line 532)
         üìù Combine multiple audio files using ffmpeg or fallback method
       - _combine_with_ffmpeg(self, audio_files, output_path) (line 551)
         üìù Combine audio files using ffmpeg
       - _combine_with_fallback(self, audio_files, output_path) (line 608)
         üìù Combine audio files using simple binary concatenation (fallback)
       - _process_script_with_production_notes(self, script_text) (line 633)
         üìù Process script to extract production notes and create audio timeline
       - _apply_production_effects(self, raw_audio_path, output_path, production_timeline) (line 709)
         üìù Apply production effects to audio based on timeline
       - _build_audio_filter_chain(self, production_timeline) (line 748)
         üìù Build ffmpeg audio filter chain based on production timeline
       - _create_podcast_package(self, script, audio_result, style, voice, topic) (line 775)
         üìù Create complete podcast package with metadata
       - list_podcasts(self) (line 804)
         üìù List all created podcasts
       - get_available_voices(self) (line 831)
         üìù Get available Google Cloud TTS voices organized by quality


================================================================================
FILE: src/config/api_keys.env
================================================================================
Path: /Users/itamar/projects/wikipedia/src/config/api_keys.env
Size: 619 bytes
Extension: .env

Lines:
  17

Size:
  619

Type:
  text


================================================================================
FILE: src/config/google-tts-credentials.json
================================================================================
Path: /Users/itamar/projects/wikipedia/src/config/google-tts-credentials.json
Size: 2,377 bytes
Extension: .json

Lines:
  13

Size:
  2377

Type:
  text


================================================================================
FILE: src/content_fetcher.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/content_fetcher.py
Size: 66,198 bytes
Extension: .py

‚ùå Analysis Error: argument of type 'BinOp' is not iterable

================================================================================
FILE: src/content_pipeline.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/content_pipeline.py
Size: 17,854 bytes
Extension: .py

üìù File Docstring:
Content Processing Pipeline

This module handles all content-related operations:
- Fetching and filtering articles
- Script generation with chapter editing
- Content length management

üì¶ Imports:
  - time
  - copy
  - datetime.datetime
  - typing.List
  - typing.Optional
  - script_formatter.PodcastScript

üèóÔ∏è  Classes:
  üìã ContentProcessor (line 17)
     üìù Handles content fetching, processing, and script generation
     Methods:
       - __init__(self, pipeline) (line 20)
         üìù Initialize with reference to main pipeline
       - _should_use_chapter_editing(self, article, target_duration) (line 27)
         üìù Determine if an article should use chapter-by-chapter editing
       - _generate_script_with_chapter_editor(self, article, style, custom_instructions) (line 44)
         üìù Generate script using chapter-by-chapter editing for long articles
       - fetch_and_generate_trending(self, count, style) (line 151)
         üìù Fetch trending articles and generate scripts
       - fetch_and_generate_featured(self, count, style) (line 236)
         üìù Fetch featured articles and generate scripts
       - generate_single_topic(self, topic, style, custom_instructions, target_duration) (line 273)
         üìù Generate script for a specific topic

  üìã ChapterScript (line 123)
     Methods:
       - __init__(self, title, script, style, source_article, word_count, estimated_duration) (line 124)


================================================================================
FILE: src/create_podcast.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/create_podcast.py
Size: 27,530 bytes
Extension: .py

‚ùå Analysis Error: argument of type 'Subscript' is not iterable

================================================================================
FILE: src/interactive_menus.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/interactive_menus.py
Size: 33,908 bytes
Extension: .py

üìù File Docstring:
Interactive Menu System - Fixed
This module handles all user interaction:
- Main menu navigation
- User input and choice handling
- Interactive workflows

üì¶ Imports:
  - sys
  - pathlib.Path
  - typing.Optional
  - traceback

üèóÔ∏è  Classes:
  üìã InteractiveMenus (line 12)
     üìù Handles all interactive menu operations
     Methods:
       - __init__(self, pipeline) (line 15)
         üìù Initialize with reference to main pipeline
       - run_main_menu(self) (line 23)
         üìù Run interactive menu for pipeline operations
       - _interactive_fetch_only(self) (line 73)
         üìù Interactive article fetching without script generation
       - _fetch_trending_only(self) (line 92)
         üìù Fetch trending articles without generating scripts
       - _fetch_featured_only(self) (line 126)
         üìù Fetch featured articles without generating scripts
       - _fetch_specific_only(self) (line 160)
         üìù Fetch specific topic without generating script
       - _interactive_article_to_script(self) (line 189)
         üìù Interactive script generation from any article
       - _script_from_cached_article(self) (line 205)
         üìù Create script from cached article
       - _script_from_new_article(self) (line 240)
         üìù Create script from newly fetched article
       - _generate_script_from_article(self, article) (line 256)
         üìù Common method to generate script from an article object
       - _interactive_complete_podcast(self) (line 390)
         üìù Interactive complete podcast generation
       - _interactive_cached_article_to_script(self) (line 432)
         üìù Interactive script generation from cached articles
       - _interactive_script_to_audio(self) (line 436)
         üìù Interactive audio generation from existing scripts - FIXED
       - _interactive_post_production(self) (line 511)
         üìù Interactive post-production enhancement
       - _show_cached_scripts(self) (line 576)
         üìù Display cached scripts
       - _show_podcasts(self) (line 594)
         üìù Display generated podcasts - FIXED
       - _show_styles(self) (line 621)
         üìù Display available styles with descriptions
       - _clear_cache(self) (line 635)
         üìù Interactive cache clearing
       - _clear_script_cache(self) (line 715)
         üìù Manually clear script cache since the method doesn't exist in PodcastScriptFormatter
       - _clear_audio_cache(self) (line 737)
         üìù Manually clear audio cache if the method doesn't exist
       - _display_processing_results(self, results, result_type) (line 765)
         üìù Display results from processing multiple articles
       - get_user_confirmation(self, message, default) (line 785)
         üìù Get user confirmation with default option
       - get_user_choice(self, options, prompt) (line 795)
         üìù Get user choice from a list of options


================================================================================
FILE: src/main.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/main.py
Size: 4,598 bytes
Extension: .py

üìù File Docstring:
Wikipedia to Podcast Pipeline - Main Entry Point

This script orchestrates the entire pipeline:
1. Fetches Wikipedia content (trending, featured, or specific topics)
2. Generates podcast scripts in various styles
3. Provides interactive menu for different operations
4. Manages the entire workflow from content to scripts

Usage:
    python main.py                    # Interactive mode
    python main.py --trending 5       # Generate 5 trending articles
    python main.py --topic "AI"       # Generate script for specific topic
    python main.py --featured 3       # Generate 3 featured articles

üì¶ Imports:
  - argparse
  - sys
  - pathlib.Path
  - pipeline.PodcastPipeline
  - traceback

‚öôÔ∏è  Functions:
  - parse_arguments() (line 33)
    üìù Parse command line arguments
  - run_command_line_mode(pipeline, args) (line 59)
    üìù Execute command line operations
  - run_interactive_mode(pipeline) (line 80)
    üìù Run the interactive menu system
  - main() (line 86)
    üìù Main entry point


================================================================================
FILE: src/pipeline.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/pipeline.py
Size: 8,583 bytes
Extension: .py

üìù File Docstring:
Core Pipeline Class - Orchestrates all components

This module contains the main PodcastPipeline class that coordinates
between content fetching, script generation, audio creation, and user interaction.

üì¶ Imports:
  - os
  - pathlib.Path
  - typing.List
  - typing.Dict
  - typing.Optional
  - dotenv.load_dotenv
  - content_fetcher.WikipediaContentFetcher
  - content_fetcher.WikipediaArticle
  - script_formatter.PodcastScriptFormatter
  - script_formatter.PodcastScript
  - article_editor.ChapterEditor
  - openai.OpenAI
  - content_pipeline.ContentProcessor
  - audio_pipeline.AudioGenerator
  - interactive_menus.InteractiveMenus

üèóÔ∏è  Classes:
  üìã PodcastPipeline (line 27)
     üìù Main pipeline orchestrator that coordinates all components
     Methods:
       - __init__(self) (line 30)
         üìù Initialize the pipeline components
       - show_status(self) (line 77)
         üìù Show current pipeline status and cached content
       - fetch_and_generate_trending(self, count, style) (line 105)
         üìù Fetch trending articles and generate scripts
       - fetch_and_generate_featured(self, count, style) (line 109)
         üìù Fetch featured articles and generate scripts
       - generate_single_topic(self, topic, style, custom_instructions, target_duration) (line 113)
         üìù Generate script for a specific topic
       - generate_complete_podcast(self, topic, style, voice, custom_instructions, audio_enabled, target_duration) (line 121)
         üìù Generate complete podcast: content ‚Üí script ‚Üí audio
       - list_podcasts(self) (line 140)
         üìù List all created podcasts
       - interactive_mode(self) (line 147)
         üìù Run interactive menu for pipeline operations
       - _make_safe_filename(self, title) (line 152)
         üìù Convert title to safe filename
       - _choose_style(self) (line 157)
         üìù Interactive style selection
       - _choose_duration(self) (line 177)
         üìù Interactive duration selection


================================================================================
FILE: src/podcast_post_production.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/podcast_post_production.py
Size: 22,297 bytes
Extension: .py

üìù File Docstring:
Podcast Post-Production System

This module adds professional finishing touches to generated podcasts:
- Custom intro/outro music
- Jingles and sound effects
- Audio mixing and mastering
- Background music layers
- Professional podcast formatting

Features:
- Music library management
- Custom intro/outro creation
- Multi-track audio mixing
- Volume leveling and mastering
- Batch post-production processing

üì¶ Imports:
  - os
  - json
  - subprocess
  - tempfile
  - pathlib.Path
  - datetime.datetime
  - typing.Dict
  - typing.List
  - typing.Optional
  - typing.Tuple
  - dataclasses.dataclass
  - requests
  - dotenv.load_dotenv
  - openai.OpenAI

üèóÔ∏è  Classes:
  üìã AudioTrack (line 32)
     üìù Represents an audio track for mixing

  üìã PodcastTemplate (line 44)
     üìù Template for podcast post-production

  üìã PodcastPostProduction (line 58)
     üìù Advanced post-production system for podcasts
     Methods:
       - __init__(self, assets_dir) (line 61)
         üìù Initialize post-production system
       - enhance_podcast(self, input_audio, template_name, custom_intro, custom_outro, background_music, output_name) (line 87)
         üìù Apply professional post-production to a podcast

Args:
    input_audio: Path to the main podcast audio
    template_name: Post-production template to use
    custom_intro: Custom intro music file
    custom_outro: Custom outro music file  
    background_music: Background music file
    output_name: Custom output filename
    
Returns:
    Path to enhanced podcast file
       - create_custom_intro(self, title, host_name, voice, music_file) (line 153)
         üìù Create a custom intro for the podcast series

Args:
    title: Podcast series title
    host_name: Host name to announce
    voice: TTS voice for intro
    music_file: Background music file
    
Returns:
    Path to created intro file
       - download_free_music(self, music_type) (line 232)
         üìù Download free music from various sources for podcast use

Args:
    music_type: Type of music ('intro', 'outro', 'background', 'jingle')
    
Returns:
    List of downloaded music file paths
       - list_available_assets(self) (line 299)
         üìù List all available audio assets
       - create_podcast_series_package(self, series_name, episodes, template_name) (line 323)
         üìù Create a complete podcast series with consistent branding

Args:
    series_name: Name of the podcast series
    episodes: List of episode audio files
    template_name: Template to apply to all episodes
    
Returns:
    Path to series package directory
       - _create_default_templates(self) (line 392)
         üìù Create default post-production templates
       - _load_template(self, template_name) (line 439)
         üìù Load a post-production template
       - _build_audio_timeline(self, main_audio, template, custom_intro, custom_outro, background_music) (line 453)
         üìù Build timeline of audio tracks for mixing
       - _mix_audio_tracks(self, timeline, output_path) (line 516)
         üìù Mix multiple audio tracks using ffmpeg
       - _estimate_audio_duration(self, audio_file) (line 549)
         üìù Estimate audio file duration
       - _check_ffmpeg(self) (line 565)
         üìù Check if ffmpeg is available

‚öôÔ∏è  Functions:
  - example_usage() (line 576)
    üìù Example of how to use the post-production system


================================================================================
FILE: src/script_formatter.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/script_formatter.py
Size: 47,234 bytes
Extension: .py

‚ùå Analysis Error: argument of type 'Call' is not iterable

================================================================================
FILE: src/tts_processor.py
================================================================================
Path: /Users/itamar/projects/wikipedia/src/tts_processor.py
Size: 10,503 bytes
Extension: .py

üìù File Docstring:
TTS Processing Module
Handles enhanced text-to-speech processing with SSML support

üì¶ Imports:
  - re
  - typing.Dict
  - typing.List
  - typing.Tuple
  - google.cloud.texttospeech

üî¢ Constants:
  - TTS_ENHANCEMENT_INSTRUCTIONS (line 209)

üèóÔ∏è  Classes:
  üìã SSMLProcessor (line 10)
     üìù Processes TTS instructions and converts them to SSML or audio cues
     Methods:
       - __init__(self) (line 13)
       - process_script_for_tts(self, script_text, use_ssml) (line 64)
         üìù Process script text for optimal TTS output

Args:
    script_text: Raw script text with TTS instructions
    use_ssml: Whether to use SSML (Google Cloud supports this)
    
Returns:
    Processed text ready for TTS
       - _fix_pronunciations(self, text) (line 95)
         üìù Apply pronunciation fixes
       - _convert_numbers(self, text) (line 101)
         üìù Convert years and numbers to words
       - _convert_to_ssml(self, text) (line 155)
         üìù Convert TTS instructions to SSML
       - _convert_to_pauses(self, text) (line 184)
         üìù Convert TTS instructions to natural pauses (for non-SSML TTS)

‚öôÔ∏è  Functions:
  - replace_year(match) (line 104)


